# 要件定義書 - Slack絵文字リアクションBot

## 1. 目的

Slackの特定チャンネルに投稿されたメッセージに対して、RAG（Retrieval-Augmented Generation）の仕組みを用いて適切な絵文字リアクションを自動的に付与するBotを開発する。メッセージの内容を理解し、共感性を重視した絵文字リアクションを提供することで、チーム内のコミュニケーションを活性化し、より豊かな表現を可能にする。

## 2. 機能要件

### 2.1 必須機能

- [ ] **Slack連携機能**
  - Slack App作成・設定（Bolt SDK使用）
  - Socket ModeまたはWebhooksでのメッセージ受信
  - 絵文字リアクション投稿機能
  - 必要権限の取得（channels:history, reactions:write）
  - メッセージフィルタリング（Bot自身の投稿除外）

- [ ] **絵文字データ管理機能**
  - JSON/CSVファイルからの絵文字データ一括登録
  - 絵文字メタデータの構造化保存（コード、説明文、カテゴリ、感情トーン、使用シーン、優先度）
  - pgvectorを使用した埋め込みベクトル保存
  - psycopg3でのPosgreSQL操作

- [ ] **RAG実装機能**
  - OpenAI Python SDKでのメッセージベクトル化（text-embedding-3-small）
  - pgvectorのコサイン類似度検索
  - 上位3個の適切な絵文字選定（固定）
  - 即時リアクション実行

- [ ] **基本運用機能**
  - 特定チャンネルでの動作
  - 全ユーザーメッセージ対象
  - スレッド内メッセージ対応

- [ ] **コンテナ環境機能**
  - Docker Composeによる環境構築
  - appコンテナ（FastAPI + Slack Boltアプリケーション）
  - dbコンテナ（PostgreSQL + pgvector）
  - 環境変数による設定管理
  - ヘルスチェックエンドポイント

### 2.2 オプション機能

- [ ] **複数チャンネル対応**（将来的な拡張）
- [ ] **リアクション数の動的調整**
- [ ] **ユーザー個別設定**（リアクション無効化等）
- [ ] **絵文字カスタマイズ機能**
- [ ] **学習機能**（ユーザー反応に基づく改善）

## 3. 非機能要件

### 3.1 パフォーマンス

- 現時点では考慮不要（元要件に準拠）
- 将来的な目標値:
  - メッセージ受信から絵文字リアクションまで5秒以内
  - 同時メッセージ処理：10件/分
  - ベクトル検索応答時間：1秒以内

### 3.2 セキュリティ

- Slack App認証情報の安全な管理
- OpenAI API キーの安全な管理
- データベース接続情報の環境変数管理
- 個人情報の非保存（メッセージ内容は一時処理のみ）

### 3.3 保守性

- コードのシンプルさ優先（過度な抽象化回避）
- 設定ファイルによる動作パラメータ調整
- ログ出力機能（現時点では考慮不要、将来的にエラー追跡用で追加）

### 3.4 互換性

- Python 3.9+対応
- FastAPI 0.115.x 対応
- PostgreSQL 14+ + pgvector拡張対応
- OpenAI API v1 対応
- Docker & Docker Compose対応
- Slack Bolt SDK対応

## 4. 制約事項

### 4.1 技術的制約

- **開発言語**: Python 3.9+
- **フレームワーク**: FastAPI（Webhooks受信用、簡素な構成）
- **Slack SDK**: slack-bolt-python（Socket Mode対応）
- **データベース**: PostgreSQL + pgvector拡張
- **DBクライアント**: psycopg (psycopg3)
- **運用環境**: Docker Compose環境（ローカル）
- **埋め込みモデル**: OpenAI "text-embedding-3-small"
- **OpenAI SDK**: openai-python (v1.68.0+)
- **コンテナ化**: Docker Compose（appコンテナ + dbコンテナ）

### 4.2 ビジネス制約（元要件に準拠）

- **デプロイ先**: オンプレミス
- **可用性**: 現時点では考慮不要
- **ログ出力**: 現時点では考慮不要
- **管理機能**: 現時点では考慮不要
- **パフォーマンス要件**: 現時点では考慮不要
- まずは動作する最小限の実装を優先
- 単一チャンネル対応から開始

### 4.3 設計制約（元要件に準拠）

- コードのシンプルさを優先、過度な抽象化は回避
- まずは動作する最小限の実装を目指す
- 拡張性は考慮するが、現時点では実装しない
- 管理機能は現段階では不要

## 5. 成功基準

### 5.1 完了の定義

- [ ] **基本機能完了**: 特定チャンネルでの絵文字リアクション自動投稿
- [ ] **RAG機能完了**: メッセージ内容に応じた適切な絵文字選択
- [ ] **データ管理完了**: 絵文字データの登録・管理機能
- [ ] **動作確認完了**: 実際のSlackチャンネルでのテスト成功
- [ ] **ドキュメント完了**: セットアップ・運用手順書作成

### 5.2 受け入れテスト

- 様々な種類のメッセージに対して文脈に合った絵文字リアクションが付与される
- レスポンス時間が許容範囲内（5秒以内）
- エラーハンドリングが適切に動作する
- 設定変更が正常に反映される

## 6. 想定されるリスク

### 6.1 技術的リスク
- **OpenAI API制限**: トークン制限やレート制限による動作制約
  - 対策: OpenAI SDKの組み込みリトライ機構、エラーハンドリング実装
- **Slack API制限**: Bolt SDKのレートリミット対応
  - 対策: SDK組み込みの適切な間隔制御
- **Slack API制限**: レート制限による動作制約
  - 対策: 適切な間隔制御、リトライ機能実装
- **ベクトルDB性能**: 大量データでの検索速度低下
  - 対策: インデックス最適化、データ量制限

### 6.2 運用リスク
- **不適切な絵文字選択**: 文脈に合わない絵文字によるユーザー不満
  - 対策: 絵文字データの品質向上、テストケース充実
- **過度なリアクション**: ユーザーからの煩わしさの声
  - 対策: 設定による調整機能、ユーザーフィードバック収集

## 7. 今後の検討事項

### 7.1 設計フェーズで詳細化すべき事項

- **絵文字データ構造の詳細設計**
  - メタデータスキーマの確定
  - カテゴリ分類の詳細定義
  - 重み付けアルゴリズムの仕様

- **エラーハンドリング戦略**
  - Slack API エラー対応
  - データベース接続エラー対応
  - 埋め込みモデル処理エラー対応

- **アーキテクチャ設計**
  - FastAPIアプリケーション構造
  - Slack BoltとFastAPIの統合方法
  - 非同期処理アーキテクチャ

- **設定管理方式**
  - 設定ファイル形式（YAML/JSON）
  - 環境変数管理方法（Docker環境対応）
  - 動的設定変更対応

- **Docker環境設計**
  - コンテナ間通信の設計
  - ボリュームマウント設計
  - ネットワーク設定
  - ヘルスチェックとロードバランシング対応

- **テスト戦略**
  - 単体テスト範囲
  - 統合テスト方法
  - Slack環境でのテスト手順

### 7.2 将来的な拡張検討項目

- 複数チャンネル対応のアーキテクチャ
- ユーザー個別設定機能
- 絵文字使用統計・分析機能
- 機械学習による改善メカニズム

## 8. 実装優先順位（元要件に準拠）

1. **Phase 0**: Docker Compose環境構築
2. **Phase 1**: 基本的な絵文字リアクション機能（単一チャンネル対応）
3. **Phase 2**: RAGによる適切な絵文字選択機能
4. **Phase 3**: 共感性を考慮した重み付け機能
5. **Phase 4**: 複数チャンネル対応（将来的な拡張）